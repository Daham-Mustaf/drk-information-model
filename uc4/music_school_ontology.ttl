@prefix drk:          <http://w3id.org/drk/ontology/> .
@prefix :             <http://w3id.org/drk/ontology/> .
@prefix rdf:          <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:         <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:          <http://www.w3.org/2002/07/owl#> .
@prefix lang:         <https://w3id.org/drk/vocabs/languages-iso639-1#> .
@prefix dcterms:      <http://purl.org/dc/terms/> .
@prefix vann:         <http://purl.org/vocab/vann/> .
@prefix schema:       <https://schema.org/> .
@prefix xsd:          <http://www.w3.org/2001/XMLSchema#> .
@prefix ids:          <https://w3id.org/idsa/core/> .
@prefix dcat:         <http://www.w3.org/ns/dcat#> .
@prefix voaf:         <http://purl.org/vocommons/voaf#> .
@prefix skos:         <http://www.w3.org/2004/02/skos/core#> .
@prefix cc:           <http://creativecommons.org/ns#> .
@prefix foaf:         <http://xmlns.com/foaf/0.1/> .
@prefix mo:           <http://purl.org/ontology/mo/> .
@prefix dbpedia:      <http://dbpedia.org/ontology/> .
@prefix event:        <http://purl.org/NET/c4dm/event.owl#> .
@prefix dbo:          <http://dbpedia.org/ontology/> .
@prefix nfo:          <http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#> .
@prefix time:         <http://www.w3.org/2006/time#> .
@prefix ncal:         <http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#> .
@prefix prov:         <http://www.w3.org/ns/prov#> .
@prefix geosparql:    <http://www.opengis.net/ont/geosparql#> .
@prefix geo:          <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix vcard:        <http://www.w3.org/2006/vcard/ns#> .



# Ontology Definition
drk:
    a                             owl:Ontology ;
    rdfs:label                    "DRK Musikschul-Manager Ontology"@en, "DRK Musikschul-Manager Ontologie"@de ;
    rdfs:comment                  "The DRK ontology for Hamburger Konservatorium's Musikschul-Manager, providing semantic concepts and properties for music school management, including student-teacher relationships, lesson scheduling, and administrative processes."@en ;
    dcterms:title                 "DRK Musikschul-Manager Ontology"@en, "DRK Musikschul-Manager Ontologie"@de ;
    owl:versionInfo               "1.0.0"^^xsd:string ;
    dcterms:hasVersion            "1.0.0"^^xsd:string ;
    dcterms:created               "2024-11-14"^^xsd:date ;
    dcterms:modified              "2024-11-14"^^xsd:date ;
    dcterms:issued                "2024-11-14"^^xsd:date ;
    dcterms:creator               [ a                  foaf:Person ;
                                    foaf:name          "Daham Mohammed Mustafa"@en ;
                                    foaf:mbox          <mailto:daham.mustafa@fit.fraunhofer.de> ;
                                    foaf:homepage      <https://github.com/Daham-Mustaf> ;
                                    dcterms:identifier <https://orcid.org/0000-0003-1867-4428> ] ;
    dcterms:creator               [ a                  foaf:Person ;
                                    foaf:name          "Rohit A. Deshmukh"@en ;
                                    foaf:mbox          <mailto:rohit.deshmukh@fit.fraunhofer.de> ;
                                    foaf:homepage      <https://github.com/rohitadeshmukh13> ;
                                    dcterms:identifier <https://orcid.org/0000-0003-2885-7076> ] ;
    dcterms:creator               [ a                  foaf:Person ;
                                    foaf:name          "Christoph Lange-Bever"@en ;
                                    foaf:mbox          <mailto:christoph.lange-bever@fit.fraunhofer.de> ;
                                    foaf:homepage      <https://github.com/clange> ;
                                    dcterms:identifier <https://orcid.org/0000-0001-9879-3827> ] ;
    dcterms:publisher             [ a             foaf:Organization ;
                                    foaf:name     "Fraunhofer FIT" ;
                                    foaf:homepage <https://www.fit.fraunhofer.de/> ] ;
    dcterms:license               <http://creativecommons.org/licenses/by/4.0/> ;
    cc:license                    <http://creativecommons.org/licenses/by/4.0/> ;
    dcterms:rights                "This ontology is distributed under Creative Commons Attribution 4.0 International License"@en ;
    vann:preferredNamespacePrefix "drk" ;
    vann:preferredNamespaceUri    "http://w3id.org/drk/ontology/" ;
    rdfs:seeAlso                  <https://github.com/Fraunhofer-FIT-DSAI/drk-information-model> ;
    vann:example                  <https://github.com/Fraunhofer-FIT-DSAI/drk-information-model/tree/main/examples> ;
    dcterms:description           """
        The DRK Musikschul-Manager ontology provides a comprehensive vocabulary for describing music school operations and management.
        The ontology is designed specifically for the Hamburger Konservatorium's requirements while maintaining interoperability within the DRK framework.
    """@en ; 
    dcterms:language              lang:en, lang:de ;
    dcterms:subject               "Music Education"@en, "School Management"@en, "Cultural Education"@en, "Music School Administration"@en ;
    dcterms:audience              "Music Schools"@en, "Music Teachers"@en, "Music Students"@en, "School Administrators"@en .


# Core Classes
:MusicEducationSchool
   a rdfs:Class, owl:Class, skos:Concept ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "Music School"@en ;
   skos:definition "An educational School specialized in music education."@en ;
    rdfs:subClassOf [
        a owl:Class ;
        owl:unionOf (
            schema:EducationalOrganization
            schema:Organization
            foaf:Organization
            vcard:Organization
        )
    ] ;
   rdfs:seeAlso <http://dbpedia.org/resource/Music_school> ;
    rdfs:seeAlso schema:EducationalOrganization .

:MusicSchoolMember
   a rdfs:Class, owl:Class, skos:Concept ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "Music School Member"@en ;
   skos:definition "A person who interacts with the music school system, including students, teachers, and administrators."@en ;
   rdfs:subClassOf [
        a owl:Class ;
        owl:unionOf (
            schema:Person
            foaf:Person
            vcard:Individual
        )
    ] ;
    rdfs:seeAlso schema:Person .

:MusicInstructor
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "Music Instructor"@en ;
    skos:definition "Professional music educator."@en ;
    rdfs:subClassOf :MusicSchoolMember .

:MusicLearner
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "Music Learner"@en ;
    skos:definition "Student enrolled for music education."@en ;
    rdfs:subClassOf :MusicSchoolMember .

:MusicInstruction
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "Music Instruction"@en ;
    skos:definition "An instructional session conducted by a teacher for one or more students, focusing on a specific musical subject or skill."@en ;
    rdfs:subClassOf [
          a owl:Class ;
          owl:unionOf (
                schema:Event
                event:Event
                mo:Performance
            )
      ] ;
    rdfs:seeAlso mo:Performance .
# could be a property 
:TeacherStudentPairing
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "Teacher Student Pairing"@en ;
    skos:definition "Match between instructor and learner."@en ;
    rdfs:subClassOf prov:Association .

:MusicGenreCategory
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "Music Genre Category"@en ;
    skos:definition "Style of music."@en ;
    owl:equivalentClass mo:Genre .

:MusicalInstrumentType
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "Musical Instrument Type"@en ;
    skos:definition "Device for producing musical sound."@en ;
    owl:equivalentClass dbo:MusicalInstrument ;
    owl:equivalentClass mo:Instrument .

# Secondary Classes
:MusicSchoolDocument
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "Music School Document"@en ;
    skos:definition "Digital asset in music school system."@en ;
    rdfs:subClassOf [
        a owl:Class ;
        owl:unionOf (
            schema:MediaObject
            dcat:Distribution
            nfo:MusicSchoolDocumentDataObject
        )
    ] .

:InstructionSchedule
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "Instruction Schedule"@en ;
    skos:definition "Timing for music instruction."@en ;
    rdfs:subClassOf [
        a owl:Class ;
        owl:unionOf (
            event:Event
            time:TemporalEntity
            ncal:Calendar
        )
    ] .

:ExternalMusicService
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "External Music Service"@en ;
    skos:definition "Third-party service integration."@en ;
    rdfs:subClassOf schema:ServiceChannel .

:MusicSchoolMemberConfirmation
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "Member Confirmation"@en ;
    skos:definition "Member verification event."@en ;
    rdfs:subClassOf [
        a owl:Class ;
        owl:unionOf (
            schema:VerifyAction
            prov:Activity
        )
    ] .

:MusicInstructorIntegration
    a rdfs:Class, owl:Class, skos:Concept ;
    rdfs:isDefinedBy drk: ;
    rdfs:label "Instructor Integration"@en ;
    skos:definition "Instructor's service connection."@en ;
    rdfs:subClassOf [
        a owl:Class ;
        owl:unionOf (
            schema:ServiceChannel
            prov:Association
        )
    ] .

# Core User Relations object property;
drk:hasUser
    a owl:ObjectProperty ;
    rdfs:label "has user"@en ;
    rdfs:isDefinedBy drk: ;
    rdfs:domain [
        a owl:Class ;
        owl:unionOf (
            drk:MusicInstructor 
            drk:MusicLearner
        )
    ] ;
    rdfs:range drk:MusicSchoolMember ;
    owl:inverseOf drk:isUserOf ;
    rdfs:comment "Links a Teacher or Student to their associated User profile in the system."@en ;
    skos:definition "Core relationship that connects the specialized roles (Teacher/Student) to their fundamental User entity, ensuring each role has exactly one user profile."@en .

# School-Member Relations
:hasSchoolAssociation
   a owl:ObjectProperty ;
   rdfs:domain :MusicEducationSchool ;
   rdfs:range [
       owl:unionOf (
           :MusicInstructor
           :MusicLearner
           :MusicSchoolDocument
       )
   ] ;
   skos:definition "Links a school to its associated members and documents."@en .

# Instruction Relations
:hasInstructionParticipant
   a owl:ObjectProperty ;
   rdfs:domain :MusicInstruction ;
   rdfs:range [
       owl:unionOf (
           :MusicInstructor
           :MusicLearner
       )
   ] ;
   skos:definition "Connects an instruction session to its participants."@en .

:hasInstructionSchedule
   a owl:ObjectProperty ;
   rdfs:domain :MusicInstruction ;
   rdfs:range :InstructionSchedule ;
   skos:definition "Links instruction to its scheduled time slot."@en .

# Integration Relations
:hasServiceIntegration
   a owl:ObjectProperty ;
   rdfs:domain [
       owl:unionOf (
           :MusicEducationSchool
           :MusicInstructor
       )
   ] ;
   rdfs:range :ExternalMusicService ;
   skos:definition "Connects schools/instructors to external services."@en .

# Member Confirmation Relations
:hasMemberConfirmation
   a owl:ObjectProperty ;
   rdfs:domain :MusicSchoolMember ;
   rdfs:range :MusicSchoolMemberConfirmationType ; #Enum
   skos:definition "Links members to their verification events."@en .

# Document Relations
:hasAssociatedDocument
   a owl:ObjectProperty ;
   rdfs:domain [
       owl:unionOf (
           :MusicEducationSchool
           :MusicSchoolMember
       )
   ] ;
   rdfs:range :MusicSchoolDocument ;
   skos:definition "Connects entities to their related documents."@en .

# Musical Relations
:hasMusicalProfile
   a owl:ObjectProperty ;
   rdfs:domain [
       owl:unionOf (
           :MusicInstructor
           :MusicLearner
           :MusicEducationSchool
       )
   ] ;
   rdfs:range [
       owl:unionOf (
           :MusicalInstrumentType
           :MusicGenreCategory
       )
   ] ;
   skos:definition "Links entities to their musical preferences and capabilities."@en .

# Schedule-Related
:hasAvailabilitySchedule
    a owl:ObjectProperty ;
    rdfs:domain [
        owl:unionOf (:MusicInstructor :MusicLearner)
    ] ;
    rdfs:range :InstructionSchedule ;
    skos:definition "Links members to their availability schedules."@en .

# Matching-Related
:hasTeacherStudentMatch
    a owl:ObjectProperty ;
    rdfs:domain :TeacherStudentPairing ;
    rdfs:range [
        owl:unionOf (:MusicInstructor :MusicLearner)
    ] ;
    skos:definition "Connects matching between teachers and students."@en .

# Student Experience Level Property
:hasStudentExperienceLevel
    a owl:ObjectProperty ;
    rdfs:domain :MusicInstructor ;
    rdfs:range :MusicExperienceLevel ;
    skos:definition "Experience levels of students that the instructor is willing to teach."@en .


:hasPreferredLocation
    a owl:ObjectProperty ;
    rdfs:domain [
        owl:unionOf (:MusicInstructor :MusicLearner :MusicInstruction)
    ] ;
    rdfs:range :MusicInstructionPlace ;
    skos:definition "Specifies preferred teaching/learning locations."@en .
# 
# Notification Properties
:hasNotificationPreference
    a owl:ObjectProperty ;
    rdfs:domain :MusicEducationSchool ;
    rdfs:range :MusicSchoolMatchNotification ;
    skos:definition "School's notification preferences for matches."@en .

# Payment/Price Properties  
# Price Properties
:hasMinPrice
    a owl:DatatypeProperty ;
    rdfs:domain [
        owl:unionOf (:MusicEducationSchool :MusicInstructor)
    ] ;
    rdfs:range xsd:decimal ;
    skos:definition "Minimum price for instruction services."@en .

:hasMaxPrice
    a owl:DatatypeProperty ;
    rdfs:domain [
        owl:unionOf (:MusicEducationSchool :MusicInstructor)
    ] ;
    rdfs:range xsd:decimal ;
    skos:definition "Maximum price for instruction services."@en .

:hasCurrency
    a owl:ObjectProperty ;
    rdfs:domain [
        owl:unionOf (:MusicEducationSchool :MusicInstructor)
    ] ;
    rdfs:range schema:Currency ;
    skos:definition "Currency used for pricing."@en .

# Preference Properties
:hasTeachingPreference
    a owl:ObjectProperty ;
    rdfs:domain :MusicInstructor ;
    rdfs:range [
        owl:unionOf ( :MusicSchoolMemberGenderPreference :MusicExperienceLevel)
    ] ;
    skos:definition "Instructor's teaching preferences."@en .

# Name Properties
:hasFirstName
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has first name"@en ;
   rdfs:comment "First name of a member in the music school system"@en ;
   rdfs:domain :MusicSchoolMember ;
   rdfs:range xsd:string ;
   owl:equivalentProperty [
       owl:unionOf (
           schema:givenName
           foaf:firstName
           vcard:given-name
       )
   ] .

:hasLastName
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has last name"@en ;
   rdfs:comment "Last name of a member in the music school system"@en ;
   rdfs:domain :MusicSchoolMember ;
   rdfs:range xsd:string ;
   owl:equivalentProperty [
       owl:unionOf (
           schema:familyName
           foaf:lastName
       )
   ] .

:hasDescription
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "hasDescription"@en ;
   rdfs:comment "Detailed textual description of an entity in the music school system"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School profiles and details
           :MusicInstructor         # Teacher biographies
           :MusicLearner           # Student profiles
           :MusicInstruction       # Lesson details
           :ExternalMusicService   # Service descriptions
           :TeacherStudentPairing  # Match details
           :MusicSchoolDocument    # Document descriptions
           :MusicalInstrumentType  # Instrument descriptions
           :MusicGenreCategory     # Genre descriptions
           :InstructionSchedule    # Schedule notes
       )
   ] ;
   rdfs:range xsd:string ;
#    equivalentProperty !
   owl:equivalentProperty [
       owl:unionOf (
           schema:description
           dcterms:description
           vcard:note
           rdfs:comment
       )
   ] .

:hasPhoneNumber
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has phone number"@en ;
   rdfs:comment "Contact phone number for schools and users"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School contact
           :MusicSchoolMember      # Member contact
           :MusicInstructor        # Teacher contact  
           :MusicLearner          # Student contact
       )
   ] ;
   rdfs:range xsd:string ;
   owl:equivalentProperty [
       owl:unionOf (
           schema:telephone
           vcard:hasTelephone
           foaf:phone
       )
   ] .

:hasEmail
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has email"@en ;
   rdfs:comment "Primary email address used for identification and communication"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicSchoolMember             # User email
           :MusicSchoolMemberConfirmation # Confirmation email
           :MusicInstructor              # Teacher email
           :MusicLearner                 # Student email
           :MusicEducationSchool         # School contact email
       )
   ] ;
   rdfs:range xsd:string ;
   owl:equivalentProperty [
       owl:unionOf (
           schema:email
           foaf:mbox
           vcard:hasEmail
       )
   ] .

:hasWebsite
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has website"@en ;
   rdfs:comment "Official website URL"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School website
           :MusicInstructor         # Teacher portfolio/website
           :ExternalMusicService    # Service website
       )
   ] ;
   rdfs:range xsd:anyURI ;
   owl:equivalentProperty [
       owl:unionOf (
           schema:url 
           schema:website 
           foaf:homepage 
           vcard:hasURL
       )
   ] .

# Location Properties
:hasCity
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has city"@en ;
   rdfs:comment "City location"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School location
           :MusicSchoolMember      # Member location
           :MusicInstructor        # Teacher location
           :MusicLearner          # Student location
           :MusicInstruction      # Lesson location
       )
   ] ;
   rdfs:range xsd:string ;
   owl:equivalentProperty [
       owl:unionOf (
           schema:addressLocality
           vcard:locality
       )
   ] .

:hasPostalCode
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has postal code"@en ;
   rdfs:comment "Postal code of location"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool
           :MusicSchoolMember
           :MusicInstructor
           :MusicLearner
       )
   ] ;
   rdfs:range xsd:string ;
   owl:equivalentProperty [
       owl:unionOf (
           schema:postalCode
           vcard:postal-code
       )
   ] .

:hasLocation 
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has location"@en ;
   rdfs:comment "Specific location details"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicInstruction     # Lesson location
           :MusicEducationSchool # School address
           :MusicInstructor      # Teaching location
           :MusicLearner        # Learning location
       )
   ] ;
   rdfs:range xsd:string ;
   owl:equivalentProperty [
       owl:unionOf (
           schema:location
           vcard:hasAddress 
           geo:location
       )
   ] .

:hasCreationTime
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has creation time"@en ;
   rdfs:comment "Entity creation timestamp"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School registration time
           :MusicSchoolMember       # Member account creation
           :MusicSchoolMemberConfirmation  # Confirmation initiation
           :MusicInstructor         # Teacher profile creation
           :MusicLearner           # Student profile creation
           :InstructionSchedule    # Schedule slot creation
           :MusicInstruction       # Lesson creation 
           :TeacherStudentPairing  # Match creation
           :MusicSchoolDocument    # Document upload time
           :ExternalMusicService   # Service integration time
           :MusicInstructorIntegration  # Teacher integration setup
       )
   ] ;
   rdfs:range xsd:dateTime .

:hasModificationTime
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has modification time"@en ;
   rdfs:comment "Last modification timestamp"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School profile updates
           :MusicSchoolMember       # Member info changes
           :MusicSchoolMemberConfirmation  # Confirmation status updates
           :MusicInstructor         # Teacher profile updates
           :MusicLearner           # Student profile changes
           :MusicInstruction       # Lesson modifications
           :ExternalMusicService   # Service config changes
           :MusicInstructorIntegration  # Integration updates
       )
   ] ;
   rdfs:range xsd:dateTime .

:hasDeletionTime
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has deletion time"@en ;
   rdfs:comment "Entity deletion timestamp"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School account deletion
           :MusicSchoolMember       # Member account removal
           :MusicInstructor         # Teacher profile deletion
           :MusicLearner           # Student profile removal
           :MusicInstruction       # Lesson cancellation
           :TeacherStudentPairing  # Match termination
       )
   ] ;
   rdfs:range xsd:dateTime .

# Personal Temporal Properties
:hasBirthday
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has birthday"@en ;
   rdfs:comment "Date of birth"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicSchoolMember     # Member birth date
           :MusicInstructor       # Teacher birth date 
           :MusicLearner         # Student birth date
       )
   ] ;
   rdfs:range xsd:date ;
   owl:equivalentProperty [
        owl:unionOf ( schema:birthDate dcterms:date )
   ] .

# Schedule-related Properties  
:hasStartTime
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has start time"@en ;
   rdfs:comment "Event start time"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :InstructionSchedule   # Schedule slot start
           :MusicInstruction      # Lesson start time
           :TeacherStudentPairing # Match start date
       )
   ] ;
   rdfs:range xsd:dateTime ;
   owl:equivalentProperty [
       owl:unionOf (
           schema:startTime
           time:hasBeginning
           prov:startedAtTime
       )
   ] .

:hasEndTime
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has end time"@en ;
   rdfs:comment "Event end time"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :InstructionSchedule   # Schedule slot end
           :MusicInstruction      # Lesson end time
           :TeacherStudentPairing # Match end date
       )
   ] ;
   rdfs:range xsd:dateTime ;
   owl:equivalentProperty [
       owl:unionOf (
           schema:endTime 
           time:hasEnd
           prov:endedAtTime
       )
   ] .

:hasPrimaryLanguage
   a owl:ObjectProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has primary language"@en ;
   rdfs:comment "Primary communication language"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool  # School's primary language
           :MusicSchoolMember     # Member's main language
           :MusicInstructor       # Teacher's teaching language
           :MusicLearner         # Student's learning language
           :MusicInstruction     # Lesson language
       )
   ] ;
   rdfs:range :Language ;
   owl:equivalentProperty schema:inLanguage .

:hasSpokenLanguages
   a owl:ObjectProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has spoken languages"@en ;
   rdfs:comment "Languages for communication"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicSchoolMember    # Member's language abilities
           :MusicInstructor      # Teacher's language skills
           :MusicLearner        # Student's known languages
       )
   ] ;
   rdfs:range :MusicSchoolLanguage ;
   owl:equivalentProperty schema:knowsLanguage .
# Numerical Properties
:hasMusicInstructorsAmount 
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has number of instructors"@en ;
   rdfs:comment "Total number of instructors"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool  # School's total teachers
       )
   ] ;
   rdfs:range xsd:nonNegativeInteger ;
   owl:equivalentProperty schema:numberOfEmployees .

:hasMusicLearnersAmount
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has number of learners"@en ;
   rdfs:comment "Total number of learners"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool  # School's total students
           :MusicInstructor       # Teacher's student count
       )
   ] ;
   rdfs:range xsd:nonNegativeInteger .

:hasYearsExperience
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has years of experience"@en ;
   rdfs:comment "Teaching experience duration"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicInstructor      # Teacher's experience years
       )
   ] ;
   rdfs:range xsd:nonNegativeInteger ;
   owl:equivalentProperty schema:OccupationalExperienceRequirements .

:hasNoticePeriod
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has notice period"@en ;
   rdfs:comment "Required notification time"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :InstructionSchedule   # Schedule notice requirement
           :MusicInstruction      # Lesson cancellation notice
       )
   ] ;
   rdfs:range xsd:nonNegativeInteger ;
   owl:equivalentProperty time:hours .


# Room Properties
:hasRoomId
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has room identifier"@en ;
   rdfs:comment "Room assignment for lesson"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicInstruction      # Lesson room number
       )
   ] ;
   rdfs:range xsd:positiveInteger ;
   owl:equivalentProperty schema:numberOfRooms .

# Verification Properties 
:isConfirmed
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "is confirmed"@en ;
   rdfs:comment "Confirmation status"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool           # School confirmation
           :MusicSchoolMemberConfirmation  # Member verification
           :TeacherStudentPairing         # Match confirmation
           :MusicInstruction              # Lesson confirmation
       )
   ] ;
   rdfs:range xsd:boolean .

:isValidated
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "is validated"@en ;
   rdfs:comment "Validation status"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School validation
           :MusicInstructor         # Teacher validation
           :MusicSchoolDocument     # Document validation
       )
   ] ;
   rdfs:range xsd:boolean .

# Teaching Properties
:canTeachMinors
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "can teach minors"@en ;
   rdfs:comment "Authorization for teaching minors"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicInstructor    # Teacher minor authorization
       )
   ] ;
   rdfs:range xsd:boolean .

# Contact Properties
:allowsEmailContact
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "allows email contact"@en ;
   rdfs:comment "Email contact preference"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicSchoolMember    # Member email preference
           :MusicInstructor      # Teacher contact settings
           :MusicLearner        # Student contact settings
       )
   ] ;
   rdfs:range xsd:boolean ;
   owl:equivalentProperty schema:contactOption .
   
# Contact Preference Properties
:allowsPhoneContact
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "allows phone contact"@en ;
   rdfs:comment "Phone contact preference"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicSchoolMember    # Member phone preference
           :MusicInstructor      # Teacher phone settings 
           :MusicLearner        # Student phone settings
       )
   ] ;
   rdfs:range xsd:boolean ;
   owl:equivalentProperty schema:contactOption .

# Match Agreement Properties
:hasTeacherAcceptance
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has teacher acceptance"@en ;
   rdfs:comment "Teacher's match acceptance"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :TeacherStudentPairing    # Teacher match response
       )
   ] ;
   rdfs:range xsd:boolean .

:hasStudentAcceptance 
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has student acceptance"@en ;
   rdfs:comment "Student's match acceptance"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :TeacherStudentPairing    # Student match response
       )
   ] ;
   rdfs:range xsd:boolean .

:isTerminated
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "is terminated"@en ;
   rdfs:comment "Match termination status"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :TeacherStudentPairing    # Match termination
           :MusicInstruction         # Lesson cancellation
       )
   ] ;
   rdfs:range xsd:boolean .

# Catalog Properties
:isTopTen
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "is top ten"@en ;
   rdfs:comment "Top 10 status indicator"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicGenreCategory      # Popular genres
           :MusicalInstrumentType   # Popular instruments
       )
   ] ;
   rdfs:range xsd:boolean .

:isAvailableInMusiq
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "is available in Musiq"@en ;
   rdfs:comment "Platform availability status"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicGenreCategory      # Available genres
           :MusicalInstrumentType   # Available instruments
       )
   ] ;
   rdfs:range xsd:boolean ;
   owl:equivalentProperty schema:isAvailableGenerically .

# Preference Properties
:hasGenderPreference
   a owl:ObjectProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has gender preference"@en ;
   rdfs:comment "Teaching/learning gender preference"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicInstructor    # Teacher gender preference
           :MusicLearner      # Student gender preference
           :TeacherStudentPairing  # Match preferences
       )
   ] ;
   rdfs:range :MusicSchoolMemberGender ; 
   owl:equivalentProperty schema:gender .

:hasAgePreference
   a owl:ObjectProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has age preference"@en ;
   rdfs:comment "Preferred teaching age groups"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicInstructor         # Teacher age preferences
           :TeacherStudentPairing   # Match age criteria
       )
   ] ;
   rdfs:range :AgeRange ;
   owl:equivalentProperty schema:suggestedAge .

:hasExperienceLevel
   a owl:ObjectProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has experience level"@en ;
   rdfs:comment "Experience level classification"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicInstructor         # Teacher's teaching levels
           :MusicLearner           # Student's proficiency
           :TeacherStudentPairing   # Match experience criteria
       )
   ] ;
   rdfs:range :ExperienceLevel ;
   owl:equivalentProperty schema:educationalLevel .

# External Reference Properties
:hasGndIdentifier
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has GND identifier"@en ;
   rdfs:comment "Authority file reference"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicGenreCategory      # Genre references
           :MusicalInstrumentType   # Instrument references
       )
   ] ;
   rdfs:range xsd:string ;
   owl:equivalentProperty skos:notation ;
   rdfs:subPropertyOf skos:exactMatch .

# External Reference Properties
:hasWikidataIdentifier
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has Wikidata identifier"@en ;
   rdfs:comment "Wikidata reference (Q number)"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicGenreCategory      # Genre Wikidata references
           :MusicalInstrumentType   # Instrument Wikidata references
       )
   ] ;
   rdfs:range xsd:string ;
   owl:equivalentProperty skos:notation ;
   rdfs:subPropertyOf skos:exactMatch .

:hasMimoIdentifier 
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has MIMO identifier"@en ;
   rdfs:comment "Musical Instrument Museums Online reference"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicGenreCategory      # Genre MIMO references
           :MusicalInstrumentType   # Instrument MIMO references 
       )
   ] ;
   rdfs:range xsd:string ;
   owl:equivalentProperty skos:notation ;
   rdfs:subPropertyOf skos:exactMatch .

# Price Range Property
:hasPriceRange
   a owl:ObjectProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has price range"@en ;
   rdfs:comment "Service pricing structure"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School pricing
           :MusicInstructor         # Teacher rates
           :MusicInstruction        # Lesson costs
       )
   ] ;
   rdfs:range rdf:JSON ;
   owl:equivalentProperty schema:priceRange .
# Social Media Properties
:hasSocialMedia
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has social media"@en ;
   rdfs:comment "Social media presence details"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School social profiles
           :MusicInstructor         # Teacher social presence
       )
   ] ;
   rdfs:range rdf:JSON ;
   owl:equivalentProperty schema:sameAs .

# Education Properties  
:hasEducation
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has education"@en ;
   rdfs:comment "Educational qualifications"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicInstructor         # Teacher education history
       )
   ] ;
   rdfs:range rdf:JSON ;
   owl:equivalentProperty schema:educationalCredentialAwarded .

# Location Properties
:hasCoordinates
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has coordinates"@en ;
   rdfs:comment "Geographic location data"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicSchoolMember       # Member location
           :MusicEducationSchool    # School location
           :MusicInstruction        # Lesson location
       )
   ] ;
   rdfs:range rdf:JSON ;
   owl:equivalentProperty schema:geo .

# Membership Properties
:hasUnionMemberships
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has union memberships"@en ;
   rdfs:comment "Professional union affiliations"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicEducationSchool    # School union memberships
           :MusicInstructor         # Teacher associations
       )
   ] ;
   rdfs:range rdf:JSON ;
   owl:equivalentProperty schema:memberOf .

# Authentication Properties
:hasPasswordHash
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has password hash"@en ;
   rdfs:comment "Secure password storage"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicSchoolMember       # Member authentication
           :MusicInstructor         # Teacher login
           :MusicLearner           # Student login
       )
   ] ;
   rdfs:range xsd:string .

# Type Properties
:hasType
   a owl:ObjectProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has type"@en ;
   rdfs:comment "Entity type classification"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicSchoolMemberConfirmation  # Registration/recovery type
           :MusicInstruction               # Lesson type (trial/single/repeat)
           :MusicSchoolDocument            # Document type (avatar etc)
       )
   ] ;
   rdfs:range [
       owl:unionOf (
           :MusicSchoolMemberConfirmationType  # Member confirmation types
           :MusicInstructionType               # Instruction categories  
           :MusicSchoolDocumentType            # Document categories
       )
   ] .

# Status Properties  
:hasStatus
   a owl:ObjectProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has status"@en ;
   rdfs:comment "Current state of instruction"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicInstruction        # Lesson status
           :TeacherStudentPairing   # Match status
       )
   ] ;
   rdfs:range :MusicInstructionStatus ;
   owl:equivalentProperty schema:status .

# Resource Link Properties
:hasUrl
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has URL"@en ;
   rdfs:comment "Resource URL"@en ;
   rdfs:domain :MusicSchoolDocument ;
   rdfs:range xsd:anyURI ;
   owl:equivalentProperty schema:url .

:hasLink
   a owl:DatatypeProperty ; 
   rdfs:isDefinedBy drk: ;
   rdfs:label "has link"@en ;
   rdfs:comment "Integration service link"@en ;
   rdfs:domain :MusicInstructorIntegration ;
   rdfs:range xsd:string ;
   owl:equivalentProperty schema:url .

:hasKey
   a owl:DatatypeProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has key"@en ;
   rdfs:comment "Unique key identifier"@en ;
   rdfs:domain [
       a owl:Class ;
       owl:unionOf (
           :MusicSchoolDocument            # File key
           :MusicSchoolMemberConfirmation  # Confirmation key
       )
   ] ;
   rdfs:range [
       owl:unionOf (
           xsd:string    # Document keys
           xsd:integer   # Confirmation codes
       )
   ] .

# Role Properties
:hasRole
   a owl:ObjectProperty ;
   rdfs:isDefinedBy drk: ;
   rdfs:label "has role"@en ;
   rdfs:comment "System role assignment"@en ;
   rdfs:domain :MusicSchoolMember ;
   rdfs:range :MusicSchoolMemberRole ; #Enum
   owl:equivalentProperty schema:role .
